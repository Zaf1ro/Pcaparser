package com.jduan;
import java.util.Iterator;


/* http://www.tcpipguide.com/free/t_DNSMessageHeaderandQuestionSectionFormat.htm */
public class DNS extends Protocol {
    public final static int ID = 0;         /* 2, a identification field by device for query */
    public final static int QR = 1;         /* 1b, identify query/response */
    public final static int OPCODE = 2;     /* 4b, the type of query */
    public final static int AA = 3;         /* 1b, Authoritative answer flag */
    public final static int TC = 4;         /* 1b, truncation flag */
    public final static int RD = 5;         /* 1b, When set, server has to answer the query recursively */
    public final static int RA = 6;         /* 1b, whether the server supports recursive queries */
    public final static int RCODE = 8;      /* 4b, Response code */
    public final static int QDCOUNT = 9;    /* 2, Hardware Address Length */
    public final static int ANCOUNT = 10;   /* 2, incremented by relay agent */
    public final static int NSCOUNT = 11;   /* 2, An identification field generated by the client */
    public final static int ARCOUNT = 12;   /* 2, seconds since client began to acquire or renew a lease */

    private int start;
    private int DNS_LEN = 12;

    DNS(byte[] __buf, int __start) {
        assert (__buf != null);
        data_buf = __buf;
        start = __start;
        nextLayer = link();
    }

    private Protocol link() {
        return null;
    }

    public String field(int id) {
        assert (data_buf != null);
        switch (id) {
            case ID:
                return Utils.bytes2Hex(data_buf, start, 2);
            case QR:
                return Integer.toString((data_buf[start+2] >>> 7) & 0x01);
            case OPCODE:
                return Integer.toString((data_buf[start+2] >>> 3) & 0x07);
            case AA:
                return Integer.toString((data_buf[start+2] >>> 2) & 0x01);
            case TC:
                return Integer.toString((data_buf[start+2] >>> 1) & 0x01);
            case RD:
                return Integer.toString(data_buf[start+2] & 0x01);
            case RA:
                return Integer.toString((data_buf[start+3] >>> 7) & 0x01);
            case RCODE:
                return Integer.toString(data_buf[start+3] & 0x0F);
            case QDCOUNT:
                return Short.toString(Utils.bBytes2Short(data_buf, start+4));
            case ANCOUNT:
                return Short.toString(Utils.bBytes2Short(data_buf, start+6));
            case NSCOUNT:
                return Short.toString(Utils.bBytes2Short(data_buf, start+8));
            case ARCOUNT:
                return Short.toString(Utils.bBytes2Short(data_buf, start+10));
            default:
                return null;
        }
    }

    public String type() {
        return "DNS";
    }

    public String text() {
        return String.format("DNS:\t ID:%s",
                field(DNS.ID)
        );
    }

    public static void main(String[] args) {
        TEST.timer.start();
        Pcap pcap = new Pcap(TEST.getDir() + "dns.pcap");
        pcap.unpack();
        TEST.timer.end("Unpack");

        TEST.timer.start();
        Iterator<Protocol> iter = pcap.iterator();
        Protocol eth = iter.next();
        if (eth instanceof Ethernet) {
            Protocol ipv4 = eth.next();
            if (ipv4 instanceof IPv4) {
                Protocol udp = ipv4.next();
                if (udp instanceof UDP) {
                    Protocol dns = udp.next();
                    if(dns instanceof DNS) {
                        System.out.println("ID: " + dns.field(DNS.ID));
                        System.out.println("QR: " + dns.field(DNS.QR));
                        System.out.println("OPCODE: " + dns.field(DNS.OPCODE));
                        System.out.println("AA: " + dns.field(DNS.AA));
                        System.out.println("TC: " + dns.field(DNS.TC));
                        System.out.println("RD: " + dns.field(DNS.RD));
                        System.out.println("RA: " + dns.field(DNS.RA));
                        System.out.println("RCODE: " + dns.field(DNS.RCODE));
                        System.out.println("QDCOUNT: " + dns.field(DNS.QDCOUNT));
                        System.out.println("ANCOUNT: " + dns.field(DNS.ANCOUNT));
                        System.out.println("NSCOUNT: " + dns.field(DNS.NSCOUNT));
                        System.out.println("ARCOUNT: " + dns.field(DNS.ARCOUNT));
                    }
                }
            }
        }
        TEST.timer.end("PRINT");
    }
}
